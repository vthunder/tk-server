#
# Events
#

type Event {
  id: Int
  status: String
  master_id: Int
  calendar_hide: Boolean
  title: String
  slug: String
  image_header: String
  start: String
  end: String
  duration: Float
  all_day: Boolean
  description: String
  category: String
  price: Int
  member_price: Int
  sku_id: String
  ext_book_text: String
  ext_book_url: String
  ext_member_discount_code: String
  show_interested: Boolean
  sidebar_pre_text: String
  sidebar_post_text: String
}

type EventMaster {
  id: Int
  featured: Boolean
  calendar_hide: Boolean
  title: String
  slug: String
  image_header: String
  all_day: Boolean
  duration: Float
  description: String
  category: String
  price: Int
  member_price: Int
  max_size: Int
  ext_book_text: String
  ext_book_url: String
  ext_member_discount_code: String
  show_interested: Boolean
  sidebar_pre_text: String
  sidebar_post_text: String
  events: [Event]
  next_event: Event
}

scalar Upload

input EventInput {
  title: String
  category: String
  date: String
  time: String
  duration: Int
  sku_id: String
  description: String
#  image_header_id: String
  image_header_file: Upload
}

input HoldInput {
  category: String
  date: String
  time: String
  duration: Int
  party_diners: Int
  party_cooks: Int
  size: Int
  name: String
  email: String
  class_info: String
}

#
# Queries & Mutations
#

type Query {
  calendar_event(id: Int!): Event
  calendar_master(id: Int, slug: String): EventMaster
  calendar_events: [Event]
  calendar_event_masters: [EventMaster]
  google_calendar_events: [Event]
}

type Mutation {
  create_calendar_event(event_data: EventInput!): String
  create_calendar_hold(event_data: HoldInput!): String
  class_interest(email: String!, master_id: Int!): String
}
